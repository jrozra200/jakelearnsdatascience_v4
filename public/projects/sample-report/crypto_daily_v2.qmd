---
title: "RLE Analytics: Crypto Daily Report"
author: "Jake Rozran - RLE Analytics"
date: "`r format(Sys.Date(), '%B %d, %Y')`"
format:
    html:
        toc: true
        smooth-scroll: true
---

```{r}
#| include: false
#| echo: false
#| warning: false
#| message: false

library(dplyr)
library(ggplot2)
library(scales)
library(readr)
library(lubridate)
library(zoo)
library(gridExtra)
library(tidyr)
library(kableExtra)
library(reticulate)
```

```{python}
#| include: false
#| echo: false
#| warning: false
#| message: false

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
import numpy as np
import scipy
from datetime import timedelta, datetime
from google.cloud import bigquery
from google.oauth2 import service_account

from prediction_functions import *

tokens = get_tokens(service_account_path = "../../big-query-key.json")
all_dat = get_report_data(service_account_path = "../../big-query-key.json")
pred_dat = get_hist_pred_data(service_account_path = "../../big-query-key.json")
```

```{r}
#| echo: false
#| warning: false
#| message: false

todays_predictions <- py$pred_dat %>% 
    mutate(pred_date = as_date(pred_date)) %>% 
    filter(pred_date == max(pred_date)) %>% 
    left_join(py$tokens %>% 
                  select(token, buy_threshold, sell_thresh, buy_ind), 
              by = "token") %>% 
    mutate(pred_date = as_date(pred_date),
           buy_decision = buy_prob > buy_threshold,
           sell_decision = sell_prob > sell_thresh,
           decision = case_when(sell_decision ~ "Sell",
                                buy_decision & !sell_decision ~ "Buy",
                                1 == 1 ~ "Hold")) 

todays_buys <- todays_predictions %>% 
    filter(decision == "Buy") %>% 
    select(token, pred_date, decision) %>% 
    rename("Token" = "token",
           "Prediction Date" = "pred_date",
           "Decision" = "decision")

todays_sells <- todays_predictions %>% 
    filter(decision == "Sell") %>% 
    select(token, pred_date, decision) %>% 
    rename("Token" = "token",
           "Prediction Date" = "pred_date",
           "Decision" = "decision")

todays_holds <- todays_predictions %>% 
    filter(decision == "Hold") %>% 
    select(token, pred_date, decision) %>% 
    rename("Token" = "token",
           "Prediction Date" = "pred_date",
           "Decision" = "decision")
```

## What to do Today

### Today's Buys

```{r}
#| echo: false
#| warning: false
#| message: false

todays_buys %>%
    kbl() %>%
    kable_minimal()
```

- A *buy* decision means the token price is predicted to rise by 10% or more in 
the next 30 days

### Today's Sells

```{r}
#| echo: false
#| warning: false
#| message: false

todays_sells %>%
    kbl() %>%
    kable_minimal()
```

- A *sell* decision means the token price is predicted to decline by 10% or more 
in the next 30 days

### Today's Holds

```{r}
#| echo: false
#| warning: false
#| message: false

todays_holds %>%
    kbl() %>%
    kable_minimal()
```

- A *hold* decision means the token is predicted to stay within 10% of the 
current price in the next 30 days

## Historical Performance - Last 60 Days

### Aggregate Performance per Token

```{r}
#| echo: false
#| warning: false
#| message: false

plot_dat <- py$pred_dat %>% 
    left_join(py$all_dat %>% 
                  select(date, token, price, price_30d, pc_30d),
              by = c("pred_date" = "date",
                     "token" = "token")) %>% 
    left_join(py$tokens %>% 
                  select(token, buy_threshold, sell_thresh, buy_ind), 
              by = "token") %>% 
    group_by(token) %>% 
    mutate(pred_date = as_date(pred_date),
           buy_decision = buy_prob > buy_threshold,
           sell_decision = sell_prob > sell_thresh,
           decision = case_when(sell_decision ~ "S",
                                buy_decision & !sell_decision ~ "B",
                                1 == 1 ~ "H"),
           confusion = case_when(is.na(pc_30d) ~ "unknown",
                                 ((decision == "S" & pc_30d <= 0) | 
                                      (decision == "B" & pc_30d >= 0) |
                                      (decision == "H" & pc_30d >= -0.1)) ~ "correct",
                                 ((decision == "S" & pc_30d > 0) | 
                                      (decision == "B" & pc_30d < 0) |
                                      (decision == "H" & pc_30d < -0.1)) ~ "incorrect")) %>% 
    filter(token %in% py$tokens$token[py$tokens$buy_ind == "buy"] & 
               pred_date >= Sys.Date() - days(91)) %>% 
    mutate(min_price = min(price)) 

plot_dat %>% 
    filter(!is.na(pc_30d) & 
               token %in% py$tokens$token[py$tokens$buy_ind == "buy"]) %>%
    summarise(`Total Correct` = sum(ifelse(confusion == "correct", 1, 0)),
              `Total Incorrect` = sum(ifelse(confusion == "incorrect", 1, 0)),
              `Total Correct Rate` = percent(`Total Correct` / 
                                                 (`Total Correct` + `Total Incorrect`)),
              `Buy Correct` = sum(ifelse(decision == "B" & confusion == "correct", 1, 0)),
              `Buy Incorrect` = sum(ifelse(decision == "B" & confusion == "incorrect", 1, 0)),
              `Buy Correct Rate` = percent(`Buy Correct` / (`Buy Correct` + `Buy Incorrect`)),
              `Sell Correct` = sum(ifelse(decision == "S" & confusion == "correct", 1, 0)),
              `Sell Incorrect` = sum(ifelse(decision == "S" & confusion == "incorrect", 1, 0)),
              `Sell Correct Rate` = percent(`Sell Correct` / 
                                                (`Sell Correct` + `Sell Incorrect`)),
              `Hold Correct` = sum(ifelse(decision == "H" & confusion == "correct", 1, 0)),
              `Hold Incorrect` = sum(ifelse(decision == "H" & confusion == "incorrect", 1, 0)),
              `Hold Correct Rate` = percent(`Hold Correct` / 
                                                (`Hold Correct` + `Hold Incorrect`))) %>%
    kbl() %>%
    kable_minimal()
```

### Graphical View of Performance

```{r}
#| echo: false
#| warning: false
#| message: false
#| out-width: "100%"
#| fig-height: 27

ggplot(plot_dat, aes(x = pred_date)) +
    geom_errorbar(aes(ymin = price, ymax = price_30d, color = confusion), 
                  width = 0) +
    geom_line(aes(y = price)) + 
    geom_point(aes(color = confusion, shape = decision, y = min_price), size = 2) + 
    scale_color_manual(values = c("correct" = "forestgreen", 
                                  "incorrect" = "red", 
                                  "unknown" = "blue")) + 
    scale_shape_manual(values = c("B" = "B", "H" = "H", "S" = "S")) + 
    scale_y_continuous(labels = dollar_format()) + 
    facet_wrap(~ token, scale = "free_y", ncol = 1) + 
    ggtitle("Historical Price & Model Decision",
            subtitle = paste0("Price in 30d Represented by Colored Lines\n", 
                              "Green: Correct Decision; Red: Incorrect; Blue:",
                              " Too Recent\nB: Buy; S: Sell; H: Hold")) + 
    theme(panel.background = element_blank(),
          panel.grid.major = element_line(color = "light gray"),
          axis.ticks = element_blank(), 
          axis.title = element_blank(), 
          plot.background = element_rect(fill = NA, color = "black"), 
          strip.background = element_blank(),
          legend.position = "none")
    
```

## Current Token Data

```{r}
#| echo: false
#| warning: false
#| message: false
#| out-width: "100%"
#| fig-height: 9

py$all_dat %>% 
    mutate(date = as_date(date)) %>% 
    filter(date >= Sys.Date() - days(365) & 
               token %in% py$tokens$token[py$tokens$buy_ind == "buy"]) %>% 
    select(token,
           date, 
           price, 
           five2_week_low, 
           five2_week_hi,
           two_hundred_ma,
           fifty_hundred_ma) %>% 
    pivot_longer(!c(token, date), names_to = "names", values_to = "values") %>% 
    mutate(names = case_when(names == "five2_week_low" ~ "52W Low",
                             names == "five2_week_hi" ~ "52W High",
                             names == "two_hundred_ma" ~ "200D MA",
                             names == "fifty_hundred_ma" ~ "50D MA",
                             names == "price" ~ "Price",
                             1 == 1 ~ names),
           names = factor(names, 
                          levels = c("Price",
                                     "50D MA",
                                     "200D MA",
                                     "52W High",
                                     "52W Low"))) %>%
    ggplot(aes(x = date, y = values, color = names)) + 
        geom_line() + 
        scale_y_continuous(labels = dollar_format()) + 
        ggtitle("Tracked Tokens Daily Price & Metrics") + 
        facet_wrap(~ token, scales = "free_y", ncol = 3) +
        theme(panel.background = element_blank(),
              panel.grid = element_line(color = "light gray"),
              axis.ticks = element_blank(), 
              axis.title = element_blank(), 
              plot.background = element_rect(fill = NA, color = "black"),
              legend.position = "top",
              legend.title = element_blank(),
              legend.key = element_blank(),
              strip.background = element_blank(),
              axis.text.x = element_text(angle = 90))
```

```{r}
#| echo: false
#| warning: false
#| message: false
#| out-width: "100%"
#| fig-height: 9

py$all_dat %>% 
    mutate(date = as_date(date)) %>% 
    filter(date >= Sys.Date() - days(365) & 
               token %in% py$tokens$token[py$tokens$buy_ind == "buy"]) %>% 
    ggplot(aes(x = date, y = total_volume)) +
        geom_bar(stat = "identity", fill = "navy") + 
        ggtitle("Tracked Tokens Daily Volumes") + 
        facet_wrap(~ token, ncol = 3, scales = "free_y") + 
        scale_y_continuous(labels = dollar_format(scale = 1 / 1000000000, 
                                                  suffix = "B")) + 
        theme(panel.background = element_blank(),
              panel.grid = element_line(color = "light gray"),
              axis.ticks = element_blank(), 
              axis.title = element_blank(), 
              plot.background = element_rect(fill = NA, color = "black"),
              strip.background = element_blank(),
              axis.text.x = element_text(angle = 90))
```

