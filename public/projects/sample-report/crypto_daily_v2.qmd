---
title: "RLE Analytics: Crypto Daily Report"
author: "Jake Rozran - RLE Analytics"
date: "`r format(Sys.Date(), '%B %d, %Y')`"
format:
    html:
        toc: true
        smooth-scroll: true
---

```{r}
#| include: false
#| echo: false
#| warning: false
#| message: false

library(dplyr)
library(ggplot2)
library(scales)
library(readr)
library(lubridate)
library(zoo)
library(gridExtra)
library(tidyr)
library(kableExtra)
library(reticulate)
library(httr)

get_spy_dat <- function(symbol = "SPY", 
                        freq_num = 1, 
                        freq = "d", 
                        period1 = as.numeric(format(as_datetime("2023-06-05"), "%s")),
                        period2 = as.numeric(format(as_datetime(Sys.time()), "%s"))) {
    symbol <- gsub("\\.", "\\-", symbol)
    URL <- paste0("https://query1.finance.yahoo.com/v7/finance/download/", 
                  symbol, "?period1=", period1, "&period2=", period2, 
                  "&interval=", freq_num, freq, 
                  "&events=history&includeAdjustedClose=true")
    
    dat <- GET(URL)
    dat <- content(dat, show_col_types = FALSE, encoding = "UTF-8")
    
    if(length(class(dat)) < 4) {
        print(paste0("shit is breaking on ", symbol))
        return(NULL)
    }
    
    dat$symbol <- symbol
    
    return(dat)
}
```

```{python}
#| include: false
#| echo: false
#| warning: false
#| message: false

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
import numpy as np
import scipy
from datetime import timedelta, datetime
from google.cloud import bigquery
from google.oauth2 import service_account

from prediction_functions import *

tokens = get_tokens(service_account_path = "../../big-query-key.json")
all_dat = get_report_data(service_account_path = "../../big-query-key.json")
pred_dat = get_hist_pred_data(service_account_path = "../../big-query-key.json")
```

```{r}
#| echo: false
#| warning: false
#| message: false

todays_predictions <- py$pred_dat %>% 
    mutate(pred_date = as_date(pred_date)) %>% 
    filter(pred_date == max(pred_date)) %>% 
    left_join(py$tokens %>% 
                  select(token, buy_threshold, sell_thresh, buy_ind), 
              by = "token") %>% 
    mutate(pred_date = as_date(pred_date),
           buy_decision = buy_prob > buy_threshold,
           sell_decision = sell_prob > sell_thresh,
           decision = case_when(sell_decision ~ "Sell",
                                buy_decision & !sell_decision ~ "Buy",
                                1 == 1 ~ "Hold")) 

todays_buys <- todays_predictions %>% 
    filter(decision == "Buy") %>% 
    select(token, pred_date, decision) %>% 
    rename("Token" = "token",
           "Prediction Date" = "pred_date",
           "Decision" = "decision")

todays_sells <- todays_predictions %>% 
    filter(decision == "Sell") %>% 
    select(token, pred_date, decision) %>% 
    rename("Token" = "token",
           "Prediction Date" = "pred_date",
           "Decision" = "decision")

todays_holds <- todays_predictions %>% 
    filter(decision == "Hold") %>% 
    select(token, pred_date, decision) %>% 
    rename("Token" = "token",
           "Prediction Date" = "pred_date",
           "Decision" = "decision")
```

## What to do Today

### Today's Buys

```{r}
#| echo: false
#| warning: false
#| message: false

todays_buys %>%
    kbl() %>%
    kable_minimal()
```

- A *buy* decision means the token price is predicted to rise by 10% or more in 
the next 30 days

### Today's Sells

```{r}
#| echo: false
#| warning: false
#| message: false

todays_sells %>%
    kbl() %>%
    kable_minimal()
```

- A *sell* decision means the token price is predicted to decline by 10% or more 
in the next 30 days

### Today's Holds

```{r}
#| echo: false
#| warning: false
#| message: false

todays_holds %>%
    kbl() %>%
    kable_minimal()
```

- A *hold* decision means the token is predicted to stay within 10% of the 
current price in the next 30 days

## Historical Performance

```{r}
#| echo: false
#| warning: false
#| message: false
#| out-width: "100%"
#| fig-height: 4

spy <- get_spy_dat()

spy <- spy %>% 
    mutate(first_price = Close[Date == min(Date)],
           spy_up_down = (Close - first_price) / first_price)

first_date <- py$pred_dat %>% 
    mutate(pred_date = as_date(pred_date)) %>% 
    filter(pred_date >= Sys.Date() - days(365)) %>% 
    pull(pred_date) %>% 
    min()

plot_dat <- py$pred_dat %>% 
    left_join(py$all_dat %>% 
                  select(token, date, price), 
              by = c("pred_date" = "date",
                     "token" = "token")) %>% 
    left_join(py$tokens %>% 
                  select(token, buy_threshold, sell_thresh, buy_ind),
              by = "token") %>% 
    filter(buy_ind == "buy" & 
               token != "PEPE") %>% 
    mutate(pred_date = as_date(pred_date),
           buy = buy_prob >= buy_threshold,
           sell = sell_prob >= sell_thresh,
           decision = case_when(
               sell ~ "sell",
               buy ~ "buy",
               1 == 1 ~ "hold")) %>% 
    filter(pred_date >= Sys.Date() - days(365)) %>% 
    group_by(token) %>% 
    arrange(token, pred_date) %>% 
    mutate(first_buy = min(pred_date[decision == "buy"])) %>% 
    filter(pred_date >= first_buy) %>% 
    mutate(day_action = case_when(decision == "buy" ~ 1,
                                  decision == "sell" ~ -1,
                                  decision == "hold" ~ 0),
           num_tokens = cumsum(day_action),
           day_action = ifelse(num_tokens < 0 & day_action < 0, 0, day_action),
           num_tokens = cumsum(day_action),
           day_invested = ifelse(day_action > 0, price, 0),
           day_returned = ifelse(day_action < 0, price, 0),
           invested = cumsum(day_invested),
           returned = cumsum(day_returned),
           port_value = (num_tokens * price) + returned,
           up_down = (port_value - invested) / invested,
           
           norm_tokens = day_action / price,
           num_norm_tokens = cumsum(norm_tokens),
           norm_tokens = ifelse(num_norm_tokens < 0 & day_action < 0, 0, norm_tokens),
           norm_num_tokens = cumsum(norm_tokens),
           norm_day_invested = ifelse(day_action > 0, price * norm_tokens, 0),
           norm_day_returned = ifelse(day_action < 0, price * norm_tokens * -1, 0),
           norm_actual_day_invested = norm_day_invested - norm_day_returned,
           norm_invested = cumsum(norm_day_invested),
           norm_actual_invested = cumsum(norm_actual_day_invested),
           norm_returned = cumsum(norm_day_returned),
           norm_port_value = (num_norm_tokens * price) + norm_returned,
           norm_up_down = (norm_port_value - norm_invested) / norm_invested) %>% 
    filter(pred_date != "2024-05-28") %>% 
    ungroup() %>% 
    group_by(pred_date) %>% 
    summarise(total_day_invested = sum(norm_day_invested),
              total_day_returned = sum(norm_day_returned),
              total_actual_day_invested = sum(norm_actual_day_invested),
              total_invested = sum(norm_invested),
              total_actual_invested = sum(norm_actual_invested),
              total_returned = sum(norm_returned),
              total_port_value = sum(norm_port_value),
              up_down = (total_port_value - total_invested) / total_invested,
              up_down_actual = (total_port_value - total_actual_invested) / total_actual_invested) %>% 
    left_join(spy %>% 
                  select(Date, spy_up_down), 
              by = c("pred_date" = "Date")) %>% 
    pivot_longer(!pred_date, names_to = "metric", values_to = "value") %>% 
    filter((metric == "spy_up_down" | metric == "up_down_actual") &
               !is.na(value)) %>% 
    mutate(metric = case_when(metric == "up_down_actual" ~ "RLE Analytics Returns",
                              metric == "up_down_actual" ~ "RLE Analytics Returns Act",
                              metric == "spy_up_down" ~ "SPY Returns"))

ggplot(plot_dat, aes(x = pred_date, y = value, color = metric)) + 
    geom_line()  + 
    ggtitle(paste("RLE Analytics Returns vs. SPY since ", 
                  format(first_date, "%B %d, %Y"))) +
    scale_y_continuous(labels = percent_format()) + 
    theme(panel.background = element_blank(),
          panel.grid.major = element_line(color = "light gray"),
          axis.ticks = element_blank(), 
          axis.title = element_blank(), 
          plot.background = element_rect(fill = NA, color = "black"), 
          strip.background = element_blank(),
          legend.position = "top",
          legend.key = element_blank(),
          legend.title = element_blank())

```


```{r}
#| echo: false
#| warning: false
#| message: false
#| out-width: "100%"
#| fig-height: 4

cryp_dat <- py$pred_dat %>% 
    left_join(py$all_dat %>% 
                  select(token, date, price), 
              by = c("pred_date" = "date",
                     "token" = "token")) %>% 
    left_join(py$tokens %>% 
                  select(token, buy_threshold, sell_thresh, buy_ind),
              by = "token") %>% 
    filter(buy_ind == "buy" & 
               token != "PEPE") %>% 
    mutate(pred_date = as_date(pred_date),
           quarter = quarter(pred_date),
           year = year(pred_date),
           buy = buy_prob >= buy_threshold,
           sell = sell_prob >= sell_thresh,
           decision = case_when(
               sell ~ "sell",
               buy ~ "buy",
               1 == 1 ~ "hold")) %>% 
    filter(pred_date >= Sys.Date() - days(365)) %>% 
    group_by(token, quarter, year) %>% 
    arrange(token, pred_date) %>% 
    mutate(first_buy = min(pred_date[decision == "buy"])) %>% 
    filter(pred_date >= first_buy) %>% 
    mutate(day_action = case_when(decision == "buy" ~ 1,
                                  decision == "sell" ~ -1,
                                  decision == "hold" ~ 0),
           num_tokens = cumsum(day_action),
           day_action = ifelse(num_tokens < 0 & day_action < 0, 0, day_action),
           num_tokens = cumsum(day_action),
           day_invested = ifelse(day_action > 0, price, 0),
           day_returned = ifelse(day_action < 0, price, 0),
           invested = cumsum(day_invested),
           returned = cumsum(day_returned),
           port_value = (num_tokens * price) + returned,
           up_down = (port_value - invested) / invested,
           
           norm_tokens = day_action / price,
           num_norm_tokens = cumsum(norm_tokens),
           norm_tokens = ifelse(num_norm_tokens < 0 & day_action < 0, 0, norm_tokens),
           norm_num_tokens = cumsum(norm_tokens),
           norm_day_invested = ifelse(day_action > 0, price * norm_tokens, 0),
           norm_day_returned = ifelse(day_action < 0, price * norm_tokens * -1, 0),
           norm_actual_day_invested = norm_day_invested - norm_day_returned,
           norm_invested = cumsum(norm_day_invested),
           norm_actual_invested = cumsum(norm_actual_day_invested),
           norm_returned = cumsum(norm_day_returned),
           norm_port_value = (num_norm_tokens * price) + norm_returned,
           norm_up_down = (norm_port_value - norm_invested) / norm_invested) %>% 
    filter(pred_date != "2024-05-28") %>% 
    ungroup() %>% 
    group_by(pred_date, quarter, year) %>% 
    summarise(total_day_invested = sum(norm_day_invested),
              total_day_returned = sum(norm_day_returned),
              total_actual_day_invested = sum(norm_actual_day_invested),
              total_invested = sum(norm_invested),
              total_actual_invested = sum(norm_actual_invested),
              total_returned = sum(norm_returned),
              total_port_value = sum(norm_port_value),
              up_down = (total_port_value - total_invested) / total_invested,
              up_down_actual = (total_port_value - total_actual_invested) / total_actual_invested) %>% 
    rename("RLE Analytics Returns" = "up_down_actual")

spy_invest <- spy %>% 
    mutate(quarter = quarter(Date),
           year = year(Date)) %>% 
    group_by(quarter, year) %>% 
    mutate(first_price = Close[Date == min(Date)],
           spy_up_down = (Close - first_price) / first_price)


plot_dat <- cryp_dat %>% 
    left_join(spy_invest, by = c("pred_date" = "Date")) %>% 
    select(pred_date, `RLE Analytics Returns`, spy_up_down, quarter.x, year.x) %>% 
    rename("quarter" = "quarter.x", 
           "year" = "year.x",
           "SPY Returns" = "spy_up_down") %>% 
    pivot_longer(!c(pred_date, quarter, year), 
                 names_to = "metric", 
                 values_to = "value") %>% 
    mutate(quarter = paste0("Q", quarter)) %>% 
    filter(!is.na(value) & 
               pred_date >= as_date("2023-07-01"))
    
first_date <- min(plot_dat$pred_date)

ggplot(plot_dat, 
       aes(x = pred_date, y = value, color = metric)) + 
    geom_line() + 
    facet_grid(~ factor(quarter, levels = c("Q3", "Q4", "Q1", "Q2")),
               scales = "free") +
    ggtitle(paste("RLE Analytics Quarterly Returns vs. SPY since ", 
                  format(first_date, "%B %d, %Y"))) +
    scale_y_continuous(labels = percent_format()) + 
    theme(panel.background = element_blank(),
          panel.grid.major = element_line(color = "light gray"),
          axis.ticks = element_blank(), 
          axis.title = element_blank(), 
          plot.background = element_rect(fill = NA, color = "black"), 
          strip.background = element_blank(),
          legend.position = "none",
          legend.key = element_blank(),
          legend.title = element_blank(),
          axis.text.x = element_text(angle = 90))
```


### Aggregate Performance per Token - Last 90 Days

```{r}
#| echo: false
#| warning: false
#| message: false

plot_dat <- py$pred_dat %>% 
    left_join(py$all_dat %>% 
                  select(date, token, price),
              by = c("pred_date" = "date",
                     "token" = "token")) %>% 
    left_join(py$tokens %>% 
                  select(token, buy_threshold, sell_thresh, buy_ind), 
              by = "token") %>% 
    mutate(pred_date = as_date(pred_date)) %>% 
    group_by(token) %>% 
    arrange(token, pred_date) %>% 
    mutate(price_30d = lead(price, 30),
           pc_30d = (price_30d - price) / price,
           buy_decision = buy_prob > buy_threshold,
           sell_decision = sell_prob > sell_thresh,
           decision = case_when(sell_decision ~ "S",
                                buy_decision & !sell_decision ~ "B",
                                1 == 1 ~ "H"),
           confusion = case_when(is.na(pc_30d) ~ "unknown",
                                 ((decision == "S" & pc_30d <= 0) | 
                                      (decision == "B" & pc_30d >= 0) |
                                      (decision == "H" & pc_30d >= -0.1)) ~ "correct",
                                 ((decision == "S" & pc_30d > 0) | 
                                      (decision == "B" & pc_30d < 0) |
                                      (decision == "H" & pc_30d < -0.1)) ~ "incorrect")) %>% 
    filter(token %in% py$tokens$token[py$tokens$buy_ind == "buy"] & 
               pred_date >= Sys.Date() - days(89)) %>% 
    mutate(min_price = min(price)) 

plot_dat %>% 
    filter(!is.na(pc_30d) & 
               token %in% py$tokens$token[py$tokens$buy_ind == "buy"]) %>%
    summarise(`Total Correct` = sum(ifelse(confusion == "correct", 1, 0)),
              `Total Incorrect` = sum(ifelse(confusion == "incorrect", 1, 0)),
              `Total Correct Rate` = percent(`Total Correct` / 
                                                 (`Total Correct` + `Total Incorrect`)),
              `Buy Correct` = sum(ifelse(decision == "B" & confusion == "correct", 1, 0)),
              `Buy Incorrect` = sum(ifelse(decision == "B" & confusion == "incorrect", 1, 0)),
              `Buy Correct Rate` = percent(`Buy Correct` / (`Buy Correct` + `Buy Incorrect`)),
              `Sell Correct` = sum(ifelse(decision == "S" & confusion == "correct", 1, 0)),
              `Sell Incorrect` = sum(ifelse(decision == "S" & confusion == "incorrect", 1, 0)),
              `Sell Correct Rate` = percent(`Sell Correct` / 
                                                (`Sell Correct` + `Sell Incorrect`)),
              `Hold Correct` = sum(ifelse(decision == "H" & confusion == "correct", 1, 0)),
              `Hold Incorrect` = sum(ifelse(decision == "H" & confusion == "incorrect", 1, 0)),
              `Hold Correct Rate` = percent(`Hold Correct` / 
                                                (`Hold Correct` + `Hold Incorrect`))) %>%
    arrange(desc(`Total Correct`)) %>%
    kbl() %>%
    kable_minimal()
```

### Graphical View of Performance

```{r}
#| echo: false
#| warning: false
#| message: false
#| out-width: "100%"
#| fig-height: 27

ggplot(plot_dat, aes(x = pred_date)) +
    geom_errorbar(aes(ymin = price, ymax = price_30d, color = confusion), 
                  width = 0) +
    geom_line(aes(y = price)) + 
    geom_point(aes(color = confusion, shape = decision, y = min_price), size = 2) + 
    scale_color_manual(values = c("correct" = "forestgreen", 
                                  "incorrect" = "red", 
                                  "unknown" = "blue")) + 
    scale_shape_manual(values = c("B" = "B", "H" = "H", "S" = "S")) + 
    scale_y_continuous(labels = dollar_format()) + 
    facet_wrap(~ token, scale = "free_y", ncol = 1) + 
    ggtitle("Historical Price & Model Decision",
            subtitle = paste0("Price in 30d Represented by Colored Lines\n", 
                              "Green: Correct Decision; Red: Incorrect; Blue:",
                              " Too Recent\nB: Buy; S: Sell; H: Hold")) + 
    theme(panel.background = element_blank(),
          panel.grid.major = element_line(color = "light gray"),
          axis.ticks = element_blank(), 
          axis.title = element_blank(), 
          plot.background = element_rect(fill = NA, color = "black"), 
          strip.background = element_blank(),
          legend.position = "none")
    
```

## Current Token Data

```{r}
#| echo: false
#| warning: false
#| message: false
#| out-width: "100%"
#| fig-height: 9

py$all_dat %>% 
    mutate(date = as_date(date)) %>% 
    filter(date >= Sys.Date() - days(365) & 
               token %in% py$tokens$token[py$tokens$buy_ind == "buy"]) %>% 
    select(token,
           date, 
           price, 
           five2_week_low, 
           five2_week_hi,
           two_hundred_ma,
           fifty_hundred_ma) %>% 
    pivot_longer(!c(token, date), names_to = "names", values_to = "values") %>% 
    mutate(names = case_when(names == "five2_week_low" ~ "52W Low",
                             names == "five2_week_hi" ~ "52W High",
                             names == "two_hundred_ma" ~ "200D MA",
                             names == "fifty_hundred_ma" ~ "50D MA",
                             names == "price" ~ "Price",
                             1 == 1 ~ names),
           names = factor(names, 
                          levels = c("Price",
                                     "50D MA",
                                     "200D MA",
                                     "52W High",
                                     "52W Low"))) %>%
    ggplot(aes(x = date, y = values, color = names)) + 
        geom_line() + 
        scale_y_continuous(labels = dollar_format()) + 
        ggtitle("Tracked Tokens Daily Price & Metrics") + 
        facet_wrap(~ token, scales = "free_y", ncol = 3) +
        theme(panel.background = element_blank(),
              panel.grid = element_line(color = "light gray"),
              axis.ticks = element_blank(), 
              axis.title = element_blank(), 
              plot.background = element_rect(fill = NA, color = "black"),
              legend.position = "top",
              legend.title = element_blank(),
              legend.key = element_blank(),
              strip.background = element_blank(),
              axis.text.x = element_text(angle = 90))
```

```{r}
#| echo: false
#| warning: false
#| message: false
#| out-width: "100%"
#| fig-height: 9

py$all_dat %>% 
    mutate(date = as_date(date)) %>% 
    filter(date >= Sys.Date() - days(365) & 
               token %in% py$tokens$token[py$tokens$buy_ind == "buy"]) %>% 
    ggplot(aes(x = date, y = total_volume)) +
        geom_bar(stat = "identity", fill = "navy") + 
        ggtitle("Tracked Tokens Daily Volumes") + 
        facet_wrap(~ token, ncol = 3, scales = "free_y") + 
        scale_y_continuous(labels = dollar_format(scale = 1 / 1000000000, 
                                                  suffix = "B")) + 
        theme(panel.background = element_blank(),
              panel.grid = element_line(color = "light gray"),
              axis.ticks = element_blank(), 
              axis.title = element_blank(), 
              plot.background = element_rect(fill = NA, color = "black"),
              strip.background = element_blank(),
              axis.text.x = element_text(angle = 90))
```

